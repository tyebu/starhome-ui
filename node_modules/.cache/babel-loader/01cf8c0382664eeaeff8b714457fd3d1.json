{"remainingRequest":"E:\\vue_workspace\\starhome\\node_modules\\thread-loader\\dist\\cjs.js!E:\\vue_workspace\\starhome\\node_modules\\babel-loader\\lib\\index.js!E:\\vue_workspace\\starhome\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\vue_workspace\\starhome\\src\\config\\router.config.js","dependencies":[{"path":"E:\\vue_workspace\\starhome\\src\\config\\router.config.js","mtime":1573028890000},{"path":"E:\\vue_workspace\\starhome\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1574523006489},{"path":"E:\\vue_workspace\\starhome\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1574523009892},{"path":"E:\\vue_workspace\\starhome\\node_modules\\babel-loader\\lib\\index.js","mtime":1574522890346},{"path":"E:\\vue_workspace\\starhome\\node_modules\\eslint-loader\\index.js","mtime":1574522972583}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}