{"remainingRequest":"E:\\vue_workspace\\starhome\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\vue_workspace\\starhome\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\vue_workspace\\starhome\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue_workspace\\starhome\\src\\views\\user\\Register.vue?vue&type=template&id=30b8895d&scoped=true&","dependencies":[{"path":"E:\\vue_workspace\\starhome\\src\\views\\user\\Register.vue","mtime":1573028890000},{"path":"E:\\vue_workspace\\starhome\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1574523006489},{"path":"E:\\vue_workspace\\starhome\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1574523010509},{"path":"E:\\vue_workspace\\starhome\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1574523006489},{"path":"E:\\vue_workspace\\starhome\\node_modules\\vue-loader\\lib\\index.js","mtime":1574523010509}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}